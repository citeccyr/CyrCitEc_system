#!/usr/bin/perl

use strict;
use warnings;

use Carp qw(confess);
use Data::Dumper;
use File::Slurper;
use List::Util qw(shuffle);
use Getopt::Std;

use Cidig::Files;
use Lafka::Input;
use Lafka::Json;
use Lafka::Paths;

use Cec::Xslt;
use Cec::Bada;
use Cec::Dates;
use Cec::Paths;

my $motto='spz';

my %o;
getopts('pvr:ia:usd:w:ny:',\%o);

my $do_date=$o{'d'} // '';
my $do_verbose=$o{'v'} // '';
## update for today
my $do_update=$o{'u'} // '';
my $do_restrict_paper=$o{'r'} // '';
my $do_ago=$o{'a'} // '';
my $do_input_read=$o{'i'} // '';
my $skip_input_read=$o{'s'} // '';
my $do_wait=$o{'w'} // 0;
## overwrite the  
my $do_young=$o{'y'} // 10;
my $skip_existing_warc=$o{'n'} // '';
my $skip_existing_pdf=$o{'p'} // '';
my $dirs=$Cec::Paths::dirs;
my $files=$Cec::Paths::files;
my $home_dir=$dirs->{'home'};
my $bada_dir=$dirs->{'bada'};

my $bada_sum=$Cec::Paths::files->{'bada_sum'};

my $today=&Cec::Dates::today;
## use input from a dateh
if($do_date and not $do_date=~m|^\d{4}-\d{2}-\d{2}$|) {
  print "I can't deal with your date $do_date";
  exit;
}
if(not $do_date) {
  ## do update on any date
  if($do_update) {
    $do_date=$today;
  }
  if($do_ago) {
    $do_date=&Cec::Dates::set_ago($today,-$do_ago);
  }
}

## files and directories

my $handles_file=$files->{'futlis'};
my $entry_dir="$bada_dir/entry";
my $entry_stylesheet = &Cec::Xslt::get_sheet('entry_date');
my $futli_stylesheet = &Cec::Xslt::get_sheet('futlis_from_spz');

####
#&renew_handles_file($dirs->{'input'});
#die;
###

my $in_dir=$dirs->{'input'};
my $in;
if($do_date) {
  my $file=&Cec::Bada::date_to_file($do_date);
  my $file_txt='';
  my $change_file="$bada_dir/change/$file";
  if(-f $change_file) {
    my $txt=&File::Slurper::read_text($change_file);
    $file_txt.=$txt;
  }
  my $entry_file="$bada_dir/entry/$file";
  if(-f $entry_file) {
    my $txt=&File::Slurper::read_text($change_file);
    $file_txt.=$txt;
  }
  if(not $file_txt) {
    ## nothnig to do for that date
    print "I have nothing to do $entry_file $change_file\n";
    exit;
  }
  $in=&gather_handles($file_txt);
}
else {
  if(not -f $handles_file) {
    &renew_handles_file($dirs->{'input'});
  }
  elsif(not $skip_input_read) {
    if($do_verbose) {
      print "I'm finding last time in $in_dir ..." ;
    }
    if($do_restrict_paper) {
      print "I am not renewing the handles files.\n";
    }
    else {
      my $in_time=&Cidig::Files::find_most_recent_time_in_directory($in_dir);
      if($do_verbose) {
	print " as $in_time.\n";
      }
      my $handles_time=&Cidig::Files::mtime($handles_file);
      if($in_time > $handles_time) {
	&renew_handles_file("$in_dir/");
      }
      else {
	print "I don't need to renew $handles_file\n";
      }
    }
  }
  $in=&Lafka::Json::load($handles_file);
}

my $max_done=$ARGV[0] // 1;
## no max if we do bada
if($do_update=$o{'u'} or $do_ago=$o{'a'}) {
  $max_done=0;
  ## but we need to set a wait
  $do_wait=1;
}

my $i=Lafka::Input->new({'ris' => 'spz',
			 'do_young' => $do_young,
			 'skip_existing' => $skip_existing_warc,
			 'skip_pdf' => $skip_existing_pdf,
			 'wait' => $do_wait,
			 'verbose'=>1});
#			 'conf'=> 'lafka_spz'});
## do a limited amount
my $count_done=0;


## main look to get things done
foreach my $papid (shuffle (keys %$in)) {
  if($do_restrict_paper) {
    if(not $papid=~m|$do_restrict_paper|i) {
      if($do_verbose) {
	print "I skip $papid because of $do_restrict_paper\n";
      }
      next;
    }
    else {
      print "I look at $papid\n";
    }
  }
  my $futlis=$in->{$papid};
  if(not $futlis) {
    confess "I need futlis for $papid.";
  }
  my $count_got=$i->get($papid,$futlis,{'verbose'=>1});
  #$i->check_id_file_idempotency($papid) and next;
  if($max_done) {
    if($count_done > $max_done) {
      last;
    }
  }
  $count_done=$count_done+$count_got;
}

####

## handles in a file, the non-bada case
sub renew_handles_file {
  my $dir=shift;
  if(not -d $dir) {
    confess "I don't have you dir $dir";
  }
  my $out={};
  my $count=0;
  my $xslt_dir=$dirs->{'xslt'} // confess "I need an xslt directory";
  foreach my $file (`find $dir -type f -name '*.xml'`) {
    if($do_verbose) {
      print "I found $file";
    }
    $out=add_to_get($file,$out);
  }
  if($do_verbose) {
    print Dumper $out;
  }
  &Lafka::Json::save($out,$handles_file);
}

## same as above, but with files_string
sub gather_handles {
  my $in_text=shift;
  my $out={};
  my $count=0;
  my $xslt_dir=$dirs->{'xslt'} // confess "I need an xslt directory";
  foreach my $file (split(/\n/,$in_text)) {
    chomp $file;
    ## collect futlis
    $out=add_to_get($file,$out);
  }
  return $out;
}

sub add_to_get {
  my $file=shift;
  my $to_get=shift // {};
  chomp $file;
  my $fufi="$file";
  my $source;
  eval {
    $source = XML::LibXML->load_xml(location => $file);
  };
  if(not $source) {
    print "I can't parse $file.\n";
    return $to_get;
  }
  my $entry_results = $entry_stylesheet->transform($source);
  my @lines;
  ## ???
  if($file=~m|$today|) {
    print "I skip $file because of $today.";
    next;
  }
  if($file=~m|/cyberleninka/|) {
    print "I skip $file because of cyberleninka.";
    next;
  }
  my $doc = XML::LibXML->load_xml(location => $file);
  my $lines=$futli_stylesheet->transform($doc);
  foreach my $line (split(/\n/,$lines)) {
    if($line eq '<?xml version="1.0" encoding="utf-8"?>') {
      next;
    }
    my @parts=split(' ',$line);
    ## no futli?
    if(not $parts[1]) {
      if($do_verbose) {
	print "I have no futli for $file\n";
      }
      next;
    }
    my $count=1;
    while($parts[$count]) {
      my $handle=lc($parts[0]);
      my $url=$parts[$count++];
      #print "I add $url to $handle\n";
      push(@{$to_get->{$handle}},$url);
    }
  }
  return $to_get;
}
